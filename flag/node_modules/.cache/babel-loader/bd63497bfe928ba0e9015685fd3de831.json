{"ast":null,"code":"var _jsxFileName = \"D:\\\\latihan\\\\course2\\\\react\\\\flag\\\\src\\\\CountryGame.js\";\nimport React, { Component } from 'react';\nimport FlagQuestion, { QuestionStates } from './FlagQuestion.js';\nimport shuffle from 'shuffle-array';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CountryGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: [],\n      options: [],\n      correctOption: undefined,\n      questionState: undefined\n    };\n    this.onGuess = this.onGuess.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://restcountries.eu/rest/v2/all\").then(resp => resp.json()).then(countries => {\n      const correctOption = Math.floor(Math.random() * countries.length);\n\n      const options = this._getOptions(correctOption, countries);\n\n      this.setState({\n        countries,\n        correctOption,\n        options,\n        questionState: QuestionStates.QUESTION\n      });\n    }).catch(console.warn);\n  }\n\n  onGuess(answer) {\n    const {\n      correctOption\n    } = this.state;\n    let questionState = answer === correctOption ? QuestionStates.ANSWER_CORRECT : QuestionStates.ANSWER_WRONG;\n    this.setState({\n      questionState\n    });\n  }\n\n  nextQuestion() {\n    const {\n      countries\n    } = this.state;\n    const correctOption = Math.floor(Math.random() * countries.length);\n\n    const options = this._getOptions(correctOption, countries);\n\n    this.setState({\n      correctOption,\n      options,\n      questionState: QuestionStates.QUESTION\n    });\n  }\n\n  _getOptions(correctOption, countries) {\n    let options = [correctOption];\n    let tries = 0;\n\n    while (options.length < 4 && tries < 15) {\n      let option = Math.floor(Math.random() * countries.length);\n\n      if (options.indexOf(option) === -1) {\n        options.push(option);\n      } else {\n        tries++;\n      }\n    }\n\n    return shuffle(options);\n  }\n\n  render() {\n    let {\n      countries,\n      correctOption,\n      options,\n      questionState\n    } = this.state;\n\n    let output = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 18\n    }, this);\n\n    if (correctOption !== undefined) {\n      const {\n        flag,\n        name\n      } = countries[correctOption];\n      let opts = options.map(opt => {\n        return {\n          id: opt,\n          name: countries[opt].name\n        };\n      });\n      output = /*#__PURE__*/_jsxDEV(FlagQuestion, {\n        answerText: name,\n        onGuess: this.onGuess,\n        onNext: this.nextQuestion,\n        options: opts,\n        questionState: questionState,\n        flag: flag\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '15px'\n      },\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CountryGame;","map":{"version":3,"sources":["D:/latihan/course2/react/flag/src/CountryGame.js"],"names":["React","Component","FlagQuestion","QuestionStates","shuffle","CountryGame","constructor","props","state","countries","options","correctOption","undefined","questionState","onGuess","bind","nextQuestion","componentDidMount","fetch","then","resp","json","Math","floor","random","length","_getOptions","setState","QUESTION","catch","console","warn","answer","ANSWER_CORRECT","ANSWER_WRONG","tries","option","indexOf","push","render","output","flag","name","opts","map","opt","id","marginTop"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport FlagQuestion, {QuestionStates} from './FlagQuestion.js';\r\nimport shuffle from 'shuffle-array';\r\n\r\nclass CountryGame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      countries: [],\r\n      options: [],\r\n      correctOption: undefined,\r\n      questionState: undefined,\r\n    }\r\n\r\n    this.onGuess = this.onGuess.bind(this);\r\n    this.nextQuestion = this.nextQuestion.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://restcountries.eu/rest/v2/all\")\r\n      .then(resp => resp.json())\r\n      .then(countries => {\r\n        const correctOption = Math.floor(Math.random() * countries.length);\r\n        const options = this._getOptions(correctOption, countries);\r\n        this.setState({\r\n          countries,\r\n          correctOption,\r\n          options,\r\n          questionState: QuestionStates.QUESTION,\r\n        });\r\n      })\r\n      .catch(console.warn)\r\n  }\r\n\r\n  onGuess(answer) {\r\n    const {correctOption} = this.state;\r\n    let questionState = answer === correctOption ?\r\n                        QuestionStates.ANSWER_CORRECT :\r\n                        QuestionStates.ANSWER_WRONG;\r\n    this.setState({questionState});\r\n  }\r\n\r\n  nextQuestion() {\r\n    const {countries} = this.state;\r\n    const correctOption = Math.floor(Math.random() * countries.length);\r\n    const options = this._getOptions(correctOption, countries);\r\n    this.setState({\r\n      correctOption,\r\n      options,\r\n      questionState: QuestionStates.QUESTION\r\n    });\r\n  }\r\n\r\n  _getOptions(correctOption, countries) {\r\n    let options = [correctOption];\r\n    let tries = 0;\r\n    while (options.length < 4 && tries < 15) {\r\n      let option = Math.floor(Math.random() * countries.length);\r\n      if (options.indexOf(option) === -1 ) {\r\n        options.push(option);\r\n      } else {\r\n        tries++;\r\n      }\r\n    }\r\n    return shuffle(options);\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      countries,\r\n      correctOption,\r\n      options,\r\n      questionState\r\n    } = this.state;\r\n    let output = <div>Loading...</div>;\r\n    if (correctOption !== undefined) {\r\n      const {flag, name} = countries[correctOption];\r\n      let opts = options.map(opt => {\r\n        return {\r\n          id: opt,\r\n          name: countries[opt].name\r\n        };\r\n      });\r\n      output = (\r\n        <FlagQuestion\r\n          answerText={name}\r\n          onGuess={this.onGuess}\r\n          onNext={this.nextQuestion}\r\n          options={opts}\r\n          questionState={questionState}\r\n          flag={flag}/>\r\n      );\r\n    }\r\n    return (\r\n      <div style={{marginTop: '15px'}}>\r\n        {output}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryGame;"]},"metadata":{},"sourceType":"module"}