{"ast":null,"code":"var _jsxFileName = \"D:\\\\latihan\\\\course2\\\\react\\\\flag\\\\src\\\\CountryGame.js\";\nimport React, { Component } from 'react';\nimport FlagQuestion, { QuestionStates } from './FlagQuestion.js';\nimport shuffle from 'shuffle-array';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CountryGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: [],\n      options: [],\n      correctOption: undefined,\n      questionState: undefined\n    };\n    this.onGuess = this.onGuess.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://restcountries.eu/rest/v2/all\").then(resp => resp.json()).then(countries => {\n      const correctOption = Math.floor(Math.random() * countries.length);\n      console.log(correctOption);\n\n      const options = this._getOptions(correctOption, countries);\n\n      this.setState({\n        countries,\n        correctOption,\n        options,\n        questionState: QuestionStates.QUESTION\n      });\n    }).catch(console.warn);\n  }\n\n  onGuess(answer) {\n    const {\n      correctOption\n    } = this.state;\n    let questionState = answer === correctOption ? QuestionStates.ANSWER_CORRECT : QuestionStates.ANSWER_WRONG;\n    this.setState({\n      questionState\n    });\n  }\n\n  nextQuestion() {\n    const {\n      countries\n    } = this.state;\n    const correctOption = Math.floor(Math.random() * countries.length);\n\n    const options = this._getOptions(correctOption, countries);\n\n    this.setState({\n      correctOption,\n      options,\n      questionState: QuestionStates.QUESTION\n    });\n  }\n\n  _getOptions(correctOption, countries) {\n    let options = [correctOption];\n    let tries = 0;\n\n    while (options.length < 4 && tries < 15) {\n      let option = Math.floor(Math.random() * countries.length);\n\n      if (options.indexOf(option) === -1) {\n        options.push(option);\n      } else {\n        tries++;\n      }\n    }\n\n    return shuffle(options);\n  }\n\n  render() {\n    let {\n      countries,\n      correctOption,\n      options,\n      questionState\n    } = this.state;\n\n    let output = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 22\n    }, this);\n\n    if (correctOption !== undefined) {\n      const {\n        flag,\n        name\n      } = countries[correctOption];\n      let opts = options.map(opt => {\n        return {\n          id: opt,\n          name: countries[opt].name\n        };\n      });\n      output = /*#__PURE__*/_jsxDEV(FlagQuestion, {\n        answerText: name,\n        onGuess: this.onGuess,\n        onNext: this.nextQuestion,\n        options: opts,\n        questionState: questionState,\n        flag: flag\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '15px'\n      },\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CountryGame;","map":{"version":3,"sources":["D:/latihan/course2/react/flag/src/CountryGame.js"],"names":["React","Component","FlagQuestion","QuestionStates","shuffle","CountryGame","constructor","props","state","countries","options","correctOption","undefined","questionState","onGuess","bind","nextQuestion","componentDidMount","fetch","then","resp","json","Math","floor","random","length","console","log","_getOptions","setState","QUESTION","catch","warn","answer","ANSWER_CORRECT","ANSWER_WRONG","tries","option","indexOf","push","render","output","flag","name","opts","map","opt","id","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport FlagQuestion, { QuestionStates } from './FlagQuestion.js';\r\nimport shuffle from 'shuffle-array';\r\n\r\nclass CountryGame extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            countries: [],\r\n            options: [],\r\n            correctOption: undefined,\r\n            questionState: undefined,\r\n        }\r\n\r\n        this.onGuess = this.onGuess.bind(this);\r\n        this.nextQuestion = this.nextQuestion.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://restcountries.eu/rest/v2/all\")\r\n            .then(resp => resp.json())\r\n            .then(countries => {\r\n                const correctOption = Math.floor(Math.random() * countries.length);\r\n                console.log(correctOption)\r\n                const options = this._getOptions(correctOption, countries);\r\n                this.setState({\r\n                    countries,\r\n                    correctOption,\r\n                    options,\r\n                    questionState: QuestionStates.QUESTION,\r\n                });\r\n            })\r\n            .catch(console.warn)\r\n    }\r\n\r\n    onGuess(answer) {\r\n        const { correctOption } = this.state;\r\n        let questionState = answer === correctOption ?\r\n            QuestionStates.ANSWER_CORRECT :\r\n            QuestionStates.ANSWER_WRONG;\r\n        this.setState({ questionState });\r\n    }\r\n\r\n    nextQuestion() {\r\n        const { countries } = this.state;\r\n        const correctOption = Math.floor(Math.random() * countries.length);\r\n        const options = this._getOptions(correctOption, countries);\r\n        this.setState({\r\n            correctOption,\r\n            options,\r\n            questionState: QuestionStates.QUESTION\r\n        });\r\n    }\r\n\r\n    _getOptions(correctOption, countries) {\r\n        let options = [correctOption];\r\n        let tries = 0;\r\n        while (options.length < 4 && tries < 15) {\r\n            let option = Math.floor(Math.random() * countries.length);\r\n            if (options.indexOf(option) === -1) {\r\n                options.push(option);\r\n            } else {\r\n                tries++;\r\n            }\r\n        }\r\n        return shuffle(options);\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            countries,\r\n            correctOption,\r\n            options,\r\n            questionState\r\n        } = this.state;\r\n        let output = <div>Loading...</div>;\r\n        if (correctOption !== undefined) {\r\n            const { flag, name } = countries[correctOption];\r\n            let opts = options.map(opt => {\r\n                return {\r\n                    id: opt,\r\n                    name: countries[opt].name\r\n                };\r\n            });\r\n            output = (\r\n                <FlagQuestion\r\n                    answerText={name}\r\n                    onGuess={this.onGuess}\r\n                    onNext={this.nextQuestion}\r\n                    options={opts}\r\n                    questionState={questionState}\r\n                    flag={flag} />\r\n            );\r\n        }\r\n        return (\r\n            <div style={{ marginTop: '15px' }}>\r\n                {output}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryGame;"]},"metadata":{},"sourceType":"module"}