{"ast":null,"code":"var _jsxFileName = \"D:\\\\latihan\\\\course2\\\\react\\\\fullstack_todo\\\\todosfrontend\\\\src\\\\TodoList.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport TodoForm from './TodoForm';\nimport TodoItem from './TodoItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIURL = '/api/todos/';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadTodos();\n  }\n\n  loadTodos() {\n    fetch(APIURL).then(res => {\n      if (!res.ok) {\n        if (res.status >= 400 && res.status < 500) {\n          return res.json().then(d => {\n            let err = {\n              errorMessage: d.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later, server not responding'\n          };\n          throw err;\n        }\n      }\n\n      return res.json();\n    }).then(todos => this.setState({\n      todos\n    }));\n  }\n\n  addTodo(val) {\n    fetch(APIURL, {\n      method: 'POST',\n      headers: new Headers({\n        'Content-type': 'application/json'\n      }),\n      body: JSON.stringify({\n        name: val\n      })\n    }).then(res => {\n      if (!res.ok) {\n        if (res.status >= 400 && res.status < 500) {\n          return res.json().then(d => {\n            let err = {\n              errorMessage: d.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later, server not responding'\n          };\n          throw err;\n        }\n      }\n\n      return res.json();\n    }).then(newTodo => this.setState({\n      todos: [...this.state.todos, newTodo]\n    }));\n  }\n\n  deleteTodo(id) {\n    const deleteURL = APIURL + id;\n    fetch(APIURL, {\n      method: 'POST',\n      headers: new Headers({\n        'Content-type': 'application/json'\n      }),\n      body: JSON.stringify({\n        name: val\n      })\n    }).then(res => {\n      if (!res.ok) {\n        if (res.status >= 400 && res.status < 500) {\n          return res.json().then(d => {\n            let err = {\n              errorMessage: d.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later, server not responding'\n          };\n          throw err;\n        }\n      }\n\n      return res.json();\n    }).then(newTodo => this.setState({\n      todos: [...this.state.todos, newTodo]\n    }));\n  }\n\n  render() {\n    const todos = this.state.todos.map(t => /*#__PURE__*/_jsxDEV(TodoItem, { ...t\n    }, t._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TodoList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n        addTodo: this.addTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), todos]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["D:/latihan/course2/react/fullstack_todo/todosfrontend/src/TodoList.js"],"names":["React","Component","TodoForm","TodoItem","APIURL","TodoList","constructor","props","state","todos","addTodo","bind","componentWillMount","loadTodos","fetch","then","res","ok","status","json","d","err","errorMessage","message","setState","val","method","headers","Headers","body","JSON","stringify","name","newTodo","deleteTodo","id","deleteURL","render","map","t","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,MAAM,GAAG,aAAf;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAC7BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,SAAL;AACH;;AAEDA,EAAAA,SAAS,GAAG;AACRC,IAAAA,KAAK,CAACV,MAAD,CAAL,CACKW,IADL,CACUC,GAAG,IAAI;AACT,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,YAAID,GAAG,CAACE,MAAJ,IAAc,GAAd,IAAqBF,GAAG,CAACE,MAAJ,GAAa,GAAtC,EAA2C;AACvC,iBAAOF,GAAG,CAACG,IAAJ,GAAWJ,IAAX,CAAgBK,CAAC,IAAI;AACxB,gBAAIC,GAAG,GAAG;AAAEC,cAAAA,YAAY,EAAEF,CAAC,CAACG;AAAlB,aAAV;AACA,kBAAMF,GAAN;AACH,WAHM,CAAP;AAIH,SALD,MAKO;AACH,cAAIA,GAAG,GAAG;AAAEC,YAAAA,YAAY,EAAE;AAAhB,WAAV;AACA,gBAAMD,GAAN;AACH;AACJ;;AACD,aAAOL,GAAG,CAACG,IAAJ,EAAP;AACH,KAdL,EAeKJ,IAfL,CAeUN,KAAK,IAAI,KAAKe,QAAL,CAAc;AAAEf,MAAAA;AAAF,KAAd,CAfnB;AAgBH;;AACDC,EAAAA,OAAO,CAACe,GAAD,EAAM;AACTX,IAAAA,KAAK,CAACV,MAAD,EAAS;AACVsB,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjB,wBAAgB;AADC,OAAZ,CAFC;AAKVC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,IAAI,EAAEP;AAAR,OAAf;AALI,KAAT,CAAL,CAOKV,IAPL,CAOUC,GAAG,IAAI;AACT,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,YAAID,GAAG,CAACE,MAAJ,IAAc,GAAd,IAAqBF,GAAG,CAACE,MAAJ,GAAa,GAAtC,EAA2C;AACvC,iBAAOF,GAAG,CAACG,IAAJ,GAAWJ,IAAX,CAAgBK,CAAC,IAAI;AACxB,gBAAIC,GAAG,GAAG;AAAEC,cAAAA,YAAY,EAAEF,CAAC,CAACG;AAAlB,aAAV;AACA,kBAAMF,GAAN;AACH,WAHM,CAAP;AAIH,SALD,MAKO;AACH,cAAIA,GAAG,GAAG;AAAEC,YAAAA,YAAY,EAAE;AAAhB,WAAV;AACA,gBAAMD,GAAN;AACH;AACJ;;AACD,aAAOL,GAAG,CAACG,IAAJ,EAAP;AACH,KApBL,EAqBKJ,IArBL,CAqBUkB,OAAO,IACT,KAAKT,QAAL,CAAc;AAAEf,MAAAA,KAAK,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,EAAsBwB,OAAtB;AAAT,KAAd,CAtBR;AAwBH;;AACDC,EAAAA,UAAU,CAACC,EAAD,EAAK;AACX,UAAMC,SAAS,GAAGhC,MAAM,GAAG+B,EAA3B;AACArB,IAAAA,KAAK,CAACV,MAAD,EAAS;AACVsB,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjB,wBAAgB;AADC,OAAZ,CAFC;AAKVC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,IAAI,EAAEP;AAAR,OAAf;AALI,KAAT,CAAL,CAOKV,IAPL,CAOUC,GAAG,IAAI;AACT,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,YAAID,GAAG,CAACE,MAAJ,IAAc,GAAd,IAAqBF,GAAG,CAACE,MAAJ,GAAa,GAAtC,EAA2C;AACvC,iBAAOF,GAAG,CAACG,IAAJ,GAAWJ,IAAX,CAAgBK,CAAC,IAAI;AACxB,gBAAIC,GAAG,GAAG;AAAEC,cAAAA,YAAY,EAAEF,CAAC,CAACG;AAAlB,aAAV;AACA,kBAAMF,GAAN;AACH,WAHM,CAAP;AAIH,SALD,MAKO;AACH,cAAIA,GAAG,GAAG;AAAEC,YAAAA,YAAY,EAAE;AAAhB,WAAV;AACA,gBAAMD,GAAN;AACH;AACJ;;AACD,aAAOL,GAAG,CAACG,IAAJ,EAAP;AACH,KApBL,EAqBKJ,IArBL,CAqBUkB,OAAO,IACT,KAAKT,QAAL,CAAc;AAAEf,MAAAA,KAAK,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,EAAsBwB,OAAtB;AAAT,KAAd,CAtBR;AAyBH;;AACDI,EAAAA,MAAM,GAAG;AACL,UAAM5B,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,CAAiB6B,GAAjB,CAAsBC,CAAD,iBAC/B,QAAC,QAAD,OAEQA;AAFR,OACSA,CAAC,CAACC,GADX;AAAA;AAAA;AAAA;AAAA,YADU,CAAd;AAMA,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,QAAD;AAAU,QAAA,OAAO,EAAE,KAAK9B;AAAxB;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGKD,KAHL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAnG4B;;AAsGjC,eAAeJ,QAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TodoForm from './TodoForm';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst APIURL = '/api/todos/';\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        }\r\n        this.addTodo = this.addTodo.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.loadTodos();\r\n    }\r\n\r\n    loadTodos() {\r\n        fetch(APIURL)\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    if (res.status >= 400 && res.status < 500) {\r\n                        return res.json().then(d => {\r\n                            let err = { errorMessage: d.message }\r\n                            throw err;\r\n                        })\r\n                    } else {\r\n                        let err = { errorMessage: 'Please try again later, server not responding' }\r\n                        throw err;\r\n                    }\r\n                }\r\n                return res.json()\r\n            })\r\n            .then(todos => this.setState({ todos }))\r\n    }\r\n    addTodo(val) {\r\n        fetch(APIURL, {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                'Content-type': 'application/json',\r\n            }),\r\n            body: JSON.stringify({ name: val })\r\n        })\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    if (res.status >= 400 && res.status < 500) {\r\n                        return res.json().then(d => {\r\n                            let err = { errorMessage: d.message }\r\n                            throw err;\r\n                        })\r\n                    } else {\r\n                        let err = { errorMessage: 'Please try again later, server not responding' }\r\n                        throw err;\r\n                    }\r\n                }\r\n                return res.json()\r\n            })\r\n            .then(newTodo =>\r\n                this.setState({ todos: [...this.state.todos, newTodo] })\r\n            )\r\n    }\r\n    deleteTodo(id) {\r\n        const deleteURL = APIURL + id;\r\n        fetch(APIURL, {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                'Content-type': 'application/json',\r\n            }),\r\n            body: JSON.stringify({ name: val })\r\n        })\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    if (res.status >= 400 && res.status < 500) {\r\n                        return res.json().then(d => {\r\n                            let err = { errorMessage: d.message }\r\n                            throw err;\r\n                        })\r\n                    } else {\r\n                        let err = { errorMessage: 'Please try again later, server not responding' }\r\n                        throw err;\r\n                    }\r\n                }\r\n                return res.json()\r\n            })\r\n            .then(newTodo =>\r\n                this.setState({ todos: [...this.state.todos, newTodo] })\r\n            )\r\n\r\n    }\r\n    render() {\r\n        const todos = this.state.todos.map((t) => (\r\n            <TodoItem\r\n                key={t._id}\r\n                {...t}\r\n            />\r\n        ))\r\n        return (\r\n            <div>\r\n                <h1>TodoList</h1>\r\n                <TodoForm addTodo={this.addTodo} />\r\n                {todos}\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}