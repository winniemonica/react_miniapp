{"ast":null,"code":"const APIURL = '/api/todos/';\nexport async function getTodos() {\n  return fetch(APIURL).then(res => {\n    if (!res.ok) {\n      if (res.status >= 400 && res.status < 500) {\n        return res.json().then(d => {\n          let err = {\n            errorMessage: d.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please try again later, server not responding'\n        };\n        throw err;\n      }\n    }\n\n    return res.json();\n  });\n}\nexport async function createTodo(val) {\n  return fetch(APIURL, {\n    method: 'POST',\n    headers: new Headers({\n      'Content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      name: val\n    })\n  }).then(res => {\n    if (!res.ok) {\n      if (res.status >= 400 && res.status < 500) {\n        return res.json().then(d => {\n          let err = {\n            errorMessage: d.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please try again later, server not responding'\n        };\n        throw err;\n      }\n    }\n\n    return res.json();\n  });\n}\nexport async function updateTodo() {\n  const deleteURL = APIURL + id;\n  return;\n  fetch(deleteURL, {\n    method: 'DELETE'\n  }).then(res => {\n    if (!res.ok) {\n      if (res.status >= 400 && res.status < 500) {\n        return res.json().then(d => {\n          let err = {\n            errorMessage: d.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please try again later, server not responding'\n        };\n        throw err;\n      }\n    }\n\n    return res.json();\n  }).then(() => {\n    const todos = this.state.todos.filter(todo => todo._id !== id);\n    this.setState({\n      todos\n    });\n  });\n}","map":{"version":3,"sources":["D:/latihan/course2/react/fullstack_todo/todosfrontend/src/api.js"],"names":["APIURL","getTodos","fetch","then","res","ok","status","json","d","err","errorMessage","message","createTodo","val","method","headers","Headers","body","JSON","stringify","name","updateTodo","deleteURL","id","todos","state","filter","todo","_id","setState"],"mappings":"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","sourcesContent":["const APIURL = '/api/todos/';\r\n\r\nexport async function getTodos() {\r\n    return fetch(APIURL)\r\n        .then(res => {\r\n            if (!res.ok) {\r\n                if (res.status >= 400 && res.status < 500) {\r\n                    return res.json().then(d => {\r\n                        let err = { errorMessage: d.message }\r\n                        throw err;\r\n                    })\r\n                } else {\r\n                    let err = { errorMessage: 'Please try again later, server not responding' }\r\n                    throw err;\r\n                }\r\n            }\r\n            return res.json()\r\n        })\r\n\r\n}\r\nexport async function createTodo(val) {\r\n    return fetch(APIURL, {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'Content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({ name: val })\r\n    })\r\n        .then(res => {\r\n            if (!res.ok) {\r\n                if (res.status >= 400 && res.status < 500) {\r\n                    return res.json().then(d => {\r\n                        let err = { errorMessage: d.message }\r\n                        throw err;\r\n                    })\r\n                } else {\r\n                    let err = { errorMessage: 'Please try again later, server not responding' }\r\n                    throw err;\r\n                }\r\n            }\r\n            return res.json()\r\n        })\r\n\r\n}\r\nexport async function updateTodo() {\r\n    const deleteURL = APIURL + id;\r\n    return\r\n    fetch(deleteURL, {\r\n        method: 'DELETE',\r\n    })\r\n        .then(res => {\r\n            if (!res.ok) {\r\n                if (res.status >= 400 && res.status < 500) {\r\n                    return res.json().then(d => {\r\n                        let err = { errorMessage: d.message }\r\n                        throw err;\r\n                    })\r\n                } else {\r\n                    let err = { errorMessage: 'Please try again later, server not responding' }\r\n                    throw err;\r\n                }\r\n            }\r\n            return res.json()\r\n        })\r\n        .then(() => {\r\n            const todos = this.state.todos.filter(todo => todo._id !== id)\r\n            this.setState({ todos })\r\n        })\r\n\r\n}"]},"metadata":{},"sourceType":"module"}