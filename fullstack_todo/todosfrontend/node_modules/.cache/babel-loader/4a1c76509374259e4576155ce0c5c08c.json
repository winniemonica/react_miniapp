{"ast":null,"code":"var _jsxFileName = \"D:\\\\latihan\\\\course2\\\\react\\\\fullstack_todo\\\\todosfrontend\\\\src\\\\TodoList.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport TodoForm from './TodoForm';\nimport TodoItem from './TodoItem';\nimport * as apiCalls from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIURL = '/api/todos/';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.addTodo = this.addTodo.bind(this); // this.deleteTodo = this.deleteTodo.bind(this)\n  }\n\n  componentWillMount() {\n    this.loadTodos();\n  }\n\n  async loadTodos() {\n    let todos = await apiCalls.getTodos();\n    this.setState({\n      todos\n    });\n  }\n\n  async addTodo(val) {\n    let newTodo = await apiCalls.createTodo(val);\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  }\n\n  deleteTodo(id) {\n    const deleteURL = APIURL + id;\n    fetch(deleteURL, {\n      method: 'DELETE'\n    }).then(res => {\n      if (!res.ok) {\n        if (res.status >= 400 && res.status < 500) {\n          return res.json().then(d => {\n            let err = {\n              errorMessage: d.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later, server not responding'\n          };\n          throw err;\n        }\n      }\n\n      return res.json();\n    }).then(() => {\n      const todos = this.state.todos.filter(todo => todo._id !== id);\n      this.setState({\n        todos\n      });\n    });\n  }\n\n  toggleTodo(todo) {\n    const updateURL = APIURL + todo._id;\n    fetch(updateURL, {\n      method: 'PUT',\n      headers: new Headers({\n        'Content-type': 'application/json'\n      }),\n      body: JSON.stringify({\n        completed: !todo.completed\n      })\n    }).then(res => {\n      if (!res.ok) {\n        if (res.status >= 400 && res.status < 500) {\n          return res.json().then(d => {\n            let err = {\n              errorMessage: d.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later, server not responding'\n          };\n          throw err;\n        }\n      }\n\n      return res.json();\n    }).then(updateTodo => {\n      const todos = this.state.todos.map(todo => todo._id === updateTodo._id ? { ...todo,\n        completed: !todo.completed\n      } : todo);\n      this.setState({\n        todos\n      });\n    });\n  }\n\n  render() {\n    const todos = this.state.todos.map(t => /*#__PURE__*/_jsxDEV(TodoItem, { ...t,\n      onDelete: this.deleteTodo.bind(this, t._id),\n      onToggle: this.toggleTodo.bind(this, t)\n    }, t._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TodoList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n        addTodo: this.addTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), todos]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["D:/latihan/course2/react/fullstack_todo/todosfrontend/src/TodoList.js"],"names":["React","Component","TodoForm","TodoItem","apiCalls","APIURL","TodoList","constructor","props","state","todos","addTodo","bind","componentWillMount","loadTodos","getTodos","setState","val","newTodo","createTodo","deleteTodo","id","deleteURL","fetch","method","then","res","ok","status","json","d","err","errorMessage","message","filter","todo","_id","toggleTodo","updateURL","headers","Headers","body","JSON","stringify","completed","updateTodo","map","render","t"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TodoForm from './TodoForm';\r\nimport TodoItem from './TodoItem';\r\nimport * as apiCalls from './api';\r\nconst APIURL = '/api/todos/';\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        }\r\n        this.addTodo = this.addTodo.bind(this)\r\n        // this.deleteTodo = this.deleteTodo.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.loadTodos();\r\n    }\r\n\r\n    async loadTodos() {\r\n        let todos = await apiCalls.getTodos()\r\n        this.setState({ todos })\r\n    }\r\n    async addTodo(val) {\r\n        let newTodo = await apiCalls.createTodo(val)\r\n        this.setState({ todos: [...this.state.todos, newTodo] })\r\n\r\n    }\r\n    deleteTodo(id) {\r\n        const deleteURL = APIURL + id;\r\n        fetch(deleteURL, {\r\n            method: 'DELETE',\r\n        })\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    if (res.status >= 400 && res.status < 500) {\r\n                        return res.json().then(d => {\r\n                            let err = { errorMessage: d.message }\r\n                            throw err;\r\n                        })\r\n                    } else {\r\n                        let err = { errorMessage: 'Please try again later, server not responding' }\r\n                        throw err;\r\n                    }\r\n                }\r\n                return res.json()\r\n            })\r\n            .then(() => {\r\n                const todos = this.state.todos.filter(todo => todo._id !== id)\r\n                this.setState({ todos })\r\n            })\r\n\r\n\r\n    }\r\n    toggleTodo(todo) {\r\n        const updateURL = APIURL + todo._id;\r\n        fetch(updateURL, {\r\n            method: 'PUT',\r\n            headers: new Headers({\r\n                'Content-type': 'application/json',\r\n            }),\r\n            body: JSON.stringify({ completed: !todo.completed })\r\n        })\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    if (res.status >= 400 && res.status < 500) {\r\n                        return res.json().then(d => {\r\n                            let err = { errorMessage: d.message }\r\n                            throw err;\r\n                        })\r\n                    } else {\r\n                        let err = { errorMessage: 'Please try again later, server not responding' }\r\n                        throw err;\r\n                    }\r\n                }\r\n                return res.json()\r\n            })\r\n            .then(updateTodo => {\r\n                const todos = this.state.todos.map(todo =>\r\n                    (todo._id === updateTodo._id)\r\n                        ? { ...todo, completed: !todo.completed }\r\n                        : todo\r\n                )\r\n                this.setState({ todos })\r\n            })\r\n\r\n    }\r\n    render() {\r\n        const todos = this.state.todos.map((t) => (\r\n            <TodoItem\r\n                key={t._id}\r\n                {...t}\r\n                onDelete={this.deleteTodo.bind(this, t._id)}\r\n                onToggle={this.toggleTodo.bind(this, t)}\r\n            />\r\n        ))\r\n        return (\r\n            <div>\r\n                <h1>TodoList</h1>\r\n                <TodoForm addTodo={this.addTodo} />\r\n                {todos}\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}